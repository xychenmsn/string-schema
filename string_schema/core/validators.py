"""
Validation utilities for Simple Schema

Contains functions for validating schemas and field definitions.
"""

from typing import Any, Dict, List, Union
import logging

from .fields import SimpleField

logger = logging.getLogger(__name__)


def validate_schema(schema: Dict[str, Any]) -> Dict[str, Any]:
    """
    Validate a JSON schema generated by Simple Schema.
    
    Args:
        schema: The JSON schema to validate
        
    Returns:
        Dictionary with validation results including:
        - valid: Boolean indicating if schema is valid
        - errors: List of error messages
        - warnings: List of warning messages
        - field_count: Number of fields in the schema
    """
    result = {
        'valid': True,
        'errors': [],
        'warnings': [],
        'field_count': 0,
        'features_used': []
    }
    
    try:
        # Basic schema structure validation
        if not isinstance(schema, dict):
            result['errors'].append("Schema must be a dictionary")
            result['valid'] = False
            return result
        
        if 'type' not in schema:
            result['errors'].append("Schema must have a 'type' field")
            result['valid'] = False
            return result
        
        schema_type = schema['type']
        
        if schema_type == 'object':
            result.update(_validate_object_schema(schema))
        elif schema_type == 'array':
            result.update(_validate_array_schema(schema))
        else:
            result['warnings'].append(f"Unusual schema type: {schema_type}")
        
        # Check for potential issues
        if result['field_count'] > 20:
            result['warnings'].append("Schema has many fields (>20), consider simplifying")
        
        if result['field_count'] == 0:
            result['warnings'].append("Schema has no fields defined")
            
    except Exception as e:
        result['errors'].append(f"Validation error: {str(e)}")
        result['valid'] = False
    
    # Set overall validity
    result['valid'] = len(result['errors']) == 0
    
    return result


def _validate_object_schema(schema: Dict[str, Any]) -> Dict[str, Any]:
    """Validate object-type schema"""
    result = {
        'field_count': 0,
        'features_used': [],
        'errors': [],
        'warnings': []
    }
    
    properties = schema.get('properties', {})
    required = schema.get('required', [])
    
    result['field_count'] = len(properties)
    
    # Validate each property
    for field_name, field_schema in properties.items():
        field_result = _validate_field_schema(field_name, field_schema)
        result['errors'].extend(field_result['errors'])
        result['warnings'].extend(field_result['warnings'])
        result['features_used'].extend(field_result['features_used'])
    
    # Validate required fields
    for req_field in required:
        if req_field not in properties:
            result['errors'].append(f"Required field '{req_field}' not found in properties")
    
    # Remove duplicate features
    result['features_used'] = list(set(result['features_used']))
    
    return result


def _validate_array_schema(schema: Dict[str, Any]) -> Dict[str, Any]:
    """Validate array-type schema"""
    result = {
        'field_count': 0,
        'features_used': ['arrays'],
        'errors': [],
        'warnings': []
    }
    
    items = schema.get('items', {})
    
    if not items:
        result['errors'].append("Array schema must have 'items' definition")
        return result
    
    # Validate array constraints
    if 'minItems' in schema:
        result['features_used'].append('array_constraints')
    if 'maxItems' in schema:
        result['features_used'].append('array_constraints')
    
    # Validate items schema
    if items.get('type') == 'object':
        items_result = _validate_object_schema(items)
        result['field_count'] = items_result['field_count']
        result['errors'].extend(items_result['errors'])
        result['warnings'].extend(items_result['warnings'])
        result['features_used'].extend(items_result['features_used'])
    else:
        # Simple array items
        field_result = _validate_field_schema('array_item', items)
        result['errors'].extend(field_result['errors'])
        result['warnings'].extend(field_result['warnings'])
        result['features_used'].extend(field_result['features_used'])
    
    return result


def _validate_field_schema(field_name: str, field_schema: Dict[str, Any]) -> Dict[str, Any]:
    """Validate individual field schema"""
    result = {
        'features_used': [],
        'errors': [],
        'warnings': []
    }
    
    # Check for union types
    if 'anyOf' in field_schema:
        result['features_used'].append('union_types')
        # Validate each union option
        for i, union_option in enumerate(field_schema['anyOf']):
            if 'type' not in union_option:
                result['errors'].append(f"Union option {i} in field '{field_name}' missing type")
    
    # Check for enum
    if 'enum' in field_schema:
        result['features_used'].append('enums')
        enum_values = field_schema['enum']
        if not isinstance(enum_values, list) or len(enum_values) == 0:
            result['errors'].append(f"Field '{field_name}' enum must be non-empty list")
    
    # Check for format hints
    if 'format' in field_schema:
        result['features_used'].append('special_types')
        format_value = field_schema['format']
        valid_formats = ['email', 'uri', 'date-time', 'date', 'uuid']
        if format_value not in valid_formats:
            result['warnings'].append(f"Field '{field_name}' uses non-standard format: {format_value}")
    
    # Check for constraints
    constraint_fields = ['minimum', 'maximum', 'minLength', 'maxLength', 'minItems', 'maxItems']
    if any(field in field_schema for field in constraint_fields):
        result['features_used'].append('constraints')
    
    # Validate constraint values
    if 'minimum' in field_schema and 'maximum' in field_schema:
        if field_schema['minimum'] > field_schema['maximum']:
            result['errors'].append(f"Field '{field_name}' minimum > maximum")
    
    if 'minLength' in field_schema and 'maxLength' in field_schema:
        if field_schema['minLength'] > field_schema['maxLength']:
            result['errors'].append(f"Field '{field_name}' minLength > maxLength")
    
    if 'minItems' in field_schema and 'maxItems' in field_schema:
        if field_schema['minItems'] > field_schema['maxItems']:
            result['errors'].append(f"Field '{field_name}' minItems > maxItems")
    
    return result


def validate_simple_field(field: SimpleField) -> Dict[str, Any]:
    """
    Validate a SimpleField instance.
    
    Args:
        field: The SimpleField to validate
        
    Returns:
        Dictionary with validation results
    """
    result = {
        'valid': True,
        'errors': [],
        'warnings': []
    }
    
    # Validate field type
    valid_types = ['string', 'integer', 'number', 'boolean']
    if field.field_type not in valid_types:
        result['warnings'].append(f"Unusual field type: {field.field_type}")
    
    # Validate constraints
    if field.min_val is not None and field.max_val is not None:
        if field.min_val > field.max_val:
            result['errors'].append("min_val cannot be greater than max_val")
    
    if field.min_length is not None and field.max_length is not None:
        if field.min_length > field.max_length:
            result['errors'].append("min_length cannot be greater than max_length")
    
    if field.min_items is not None and field.max_items is not None:
        if field.min_items > field.max_items:
            result['errors'].append("min_items cannot be greater than max_items")
    
    # Validate choices
    if field.choices and len(field.choices) == 0:
        result['errors'].append("choices list cannot be empty")
    
    # Validate union types
    if field.union_types and len(field.union_types) < 2:
        result['warnings'].append("union_types should have at least 2 types")
    
    # Set overall validity
    result['valid'] = len(result['errors']) == 0
    
    return result
